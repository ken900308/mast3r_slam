# Base image with ROS Humble
FROM ros:humble-ros-base-jammy

# Set timezone and non-interactive mode
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Taipei

ENV QT_X11_NO_MITSHM=1
ENV PYTHONUNBUFFERED=1
ENV FORCE_CUDA=1

# （可選）指定要編譯的 GPU 架構，縮短編譯時間；依你的卡調整
ENV TORCH_CUDA_ARCH_LIST="8.6;8.9"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install dependencies for Python and PyTorch and GUI and OpenCV
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    lsb-release \
    git \
    software-properties-common \
    wget \
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    python3-pip \
    build-essential \
    cmake \
    pkg-config \
    # GUI 支持
    x11-apps \
    mesa-utils \
    libglvnd0 \
    libglvnd-dev \
    libegl1 \
    libgles2 \
    libxrandr2 \
    libxinerama1 \
    libxcursor1 \
    libxi6 \
    libgtk-3-dev \
    # OpenCV 依賴
    libglib2.0-0 \
    libxext6 \
    libsm6 \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates gnupg curl libusb-1.0-0 && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://librealsense.intel.com/Debian/librealsense.pgp \
      | gpg --dearmor -o /etc/apt/keyrings/librealsense-archive-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/librealsense-archive-keyring.gpg] \
      http://librealsense.intel.com/Debian/apt-repo jammy main" \
      > /etc/apt/sources.list.d/librealsense.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    librealsense2-utils librealsense2-dev librealsense2-gl && \
    rm -rf /var/lib/apt/lists/*

# Set Python 3.10 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1

# Install PyTorch 2.5.1 with CUDA 12.4 support kun
RUN pip install torch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 --index-url https://download.pytorch.org/whl/cu124

# 安裝 CUDA Toolkit 12.4（含 nvcc/headers）
RUN apt-get update && apt-get install -y --no-install-recommends wget gnupg ca-certificates && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt-get update && apt-get install -y --no-install-recommends cuda-toolkit-12-4 && \
    ln -sfn /usr/local/cuda-12.4 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# 設定 CUDA_HOME / PATH / LD_LIBRARY_PATH
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH="${CUDA_HOME}/lib64:${CUDA_HOME}/targets/x86_64-linux/lib:${LD_LIBRARY_PATH}"

# （可選）把庫路徑寫入 ldconfig
RUN printf "%s\n" \
    "/usr/local/cuda/lib64" \
    "/usr/local/cuda/targets/x86_64-linux/lib" \
    > /etc/ld.so.conf.d/cuda.conf && ldconfig

# Sanity check: 列出 Toolkit 與 libcudart 路徑
RUN set -eux; \
    echo "== CUDA dirs =="; ls -l /usr/local; ls -l /usr/local/cuda* || true; \
    echo "== cudart candidates =="; \
    ls -l /usr/local/cuda*/targets/x86_64-linux/lib/libcudart* || true; \
    echo "== ldconfig (libcudart) =="; ldconfig -p | grep -E "libcudart\.so" || true

# Install additional ROS dependencies and cv_bridge
RUN apt-get update && apt-get install -y \
    python3-rosdep \
    python3-colcon-common-extensions \
    ros-humble-cv-bridge \
    ros-humble-geometry-msgs \
    ros-humble-sensor-msgs \
    ros-humble-std-msgs \
    ros-humble-rclpy \
    ros-humble-rosbridge-server \
    python3-cv-bridge \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep (if not already done in base image)
RUN if [ ! -f /etc/ros/rosdep/sources.list.d/20-default.list ]; then rosdep init; fi && rosdep update

# Install development tools
RUN apt-get update && apt-get install -y \
    nano \
    ros-humble-foxglove-bridge \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for the project
RUN python3 -m pip install \
    einops \
    efficientnet_pytorch \
    PyYAML \
    Pillow \
    prettytable \
    matplotlib \
    scipy \
    wandb \
    open3d \
    warmup_scheduler \
    pyrealsense2 \
    "imgui[glfw,opengl3]==2.0.0" \
    && python3 -m pip install --upgrade pip

# 3) 進到專案根目錄並安裝：子模組 + 專案本體（editable）
WORKDIR /workspace
COPY MASt3R-SLAM /workspace/MASt3R-SLAM

RUN python -m pip install --upgrade pip && \
    python -m pip install --upgrade "setuptools>=70" "packaging>=24.1" "wheel>=0.43" ninja

# 先鎖 numpy / opencv
RUN python -m pip install --upgrade pip setuptools wheel && \
    python -m pip install "numpy==1.26.4" "opencv-python==4.8.1.78"

# WORKDIR /workspace/MASt3R-SLAM
# RUN python -m pip install --no-build-isolation thirdparty/mast3r && \
#     python -m pip install --no-build-isolation thirdparty/in3d && \
#     python -m pip install --no-build-isolation . --no-cache-dir

# Source ROS setup in bashrc
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

CMD ["/bin/bash"]